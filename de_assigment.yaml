
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    # An important note about accessing Kafka from clients on other machines: 
    # -----------------------------------------------------------------------
    #
    # The config used here exposes port 9092 for _external_ connections to the broker
    # i.e. those from _outside_ the docker network. This could be from the host machine
    # running docker, or maybe further afield if you've got a more complicated setup. 
    # If the latter is true, you will need to change the value 'localhost' in 
    # KAFKA_ADVERTISED_LISTENERS to one that is resolvable to the docker host from those 
    # remote clients
    #
    # For connections _internal_ to the docker network, such as from other services
    # and components, use kafka:29092.
    #
    # See https://rmoff.net/2018/08/02/kafka-listeners-explained/ for details
    # "`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-'"`-._,-
    #
version: '3.8'
services:
  #Initialize zookeeper
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000                                       # Heartbeat(ms)
      ZOOKEEPER_INIT_LIMIT: 5                                         # Specify the maximum number of tick intervals a follower can take to initialize with the leader
      ZOOKEEPER_SYNC_LIMIT: 2                                         # Specify the maximum number of tick intervals that can pass between sending a request and receiving an acknowledgment.
    ports:
      - "2181:2181"
    container_name: zookeeper_1
    healthcheck:
      test: nc -z zookeeper 2181 || exit -1                                                         # Check if port 2182 is open
      start_period: 15s                                                                             # Defines the period to wait before starting to perform health checks.
      interval: 5s
      timeout: 10s                                                                                  # Specifies the maximum time allowed for a single health check to complete, longer than this will be considdered as fail.
      retries: 10                                                                                   # Determines the number of consecutive failures needed to mark the service as unhealthy

  broker_01:
    image: confluentinc/cp-kafka:latest
    depends_on:
      zookeeper:
        condition: service_healthy                                                                  # Initialize broker_01 after zookeeper is confirmed healthy
    container_name: broker_01
    environment:
      KAFKA_BROKER_ID: 1                                                                            # Assigns a unique ID to each Kafka broker
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181                                                       # This tells the Kafka broker how to connect to Zookeeper, which is used for managing cluster metadata and leader election.
      KAFKA_LISTENERS: PLAINTEXT_HOST://broker_01:9092,PLAINTEXT://broker_01:29092                  # Specifies the protocols and ports the broker will use to listen for connections from clients and other brokers
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9092,PLAINTEXT://broker_01:29092       # These are the addresses that clients will use to connect to the broker.
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT            # Defines the security protocol to use for each listener name
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT                                                   # Specifies which listener should be used for communication between brokers in the cluster
      KAFKA_JMX_PORT: 9090                                                                          # This port is used for JMX monitoring and management of the Kafka broker
      KAFKA_LOG_DIRS: /var/lib/kafka/data                                                           # Kafka stores its data in these directories. Each log directory should be on a separate disk for better performance
      KAFKA_NUM_PARTITIONS: 2                                                                       #  This value determines how many partitions are created by default when a new topic is created
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1                                                     # The offsets topic stores consumer offsets. This setting determines how many replicas of this topic are maintained across the cluster
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1                                                        # This is the minimum number of replicas that must acknowledge a write for it to be considered successful. This ensures durability and consistency of transactional state.
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1                                             # This determines how many replicas of the transaction state log are maintained. A higher replication factor increases fault tolerance
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100                                                   # This delay helps to avoid too frequent rebalancing, which can be expensive in terms of performance
      CONFLUENT_METRICS_ENABLE: 'false'
    ports:
      - 9092:9092
    healthcheck:
      test: nc -z broker_01 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10  

  broker_02:
      image: confluentinc/cp-kafka:latest
      depends_on:
        zookeeper:
          condition: service_healthy
      container_name: broker_02
      environment:
        KAFKA_BROKER_ID: 2
        KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
        KAFKA_LISTENERS: PLAINTEXT_HOST://broker_02:9094,PLAINTEXT://broker_02:29092
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT_HOST://localhost:9094,PLAINTEXT://broker_02:29092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_JMX_PORT: 9090
        KAFKA_LOG_DIRS: /var/lib/kafka/data
        KAFKA_NUM_PARTITIONS: 2
        KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 100
        CONFLUENT_METRICS_ENABLE: 'false'
      ports:
        - 9094:9094
      healthcheck:
        test: nc -z broker_02 9094 || exit -1
        start_period: 15s
        interval: 5s
        timeout: 10s
        retries: 10


  kafka-ui:
    container_name: kafka-ui_1
    image: provectuslabs/kafka-ui:latest
    ports:
      - 8080:8080
    depends_on:
      broker_01:
        condition: service_healthy
      broker_02:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: vdt-kafka-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker_01:29092,broker_02:29092
      KAFKA_CLUSTERS_0_METRICS_PORT: 9090
    healthcheck:
      test: nc -z kafka-ui 8080 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  nifi:
    container_name: nifi_1
    image: apache/nifi:latest
    ports:
      - "8081:8080"
    environment:
      - NIFI_WEB_HTTP_PORT=8080
    volumes:
      - ./nifi/nifi_data:/opt/nifi/nifi-current/data
      - ./nifi/nifi_config:/opt/nifi/nifi-current/hdfs_config
      - ./nifi/nifi_template:/opt/nifi/nifi-current/template
    healthcheck:
      test: nc -z nifi 8081 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
      
  namenode:
    image: bde2020/hadoop-namenode:2.0.0-hadoop3.2.1-java8
    container_name: namenode
    restart: always
    ports:
      - 9870:9870
      - 9000:9000
    volumes:
      - hadoop_namenode:/hadoop/dfs/name
      - $PWD/hadoop/hadoop_home:/home
      - ./data:/hadoop_data/data
    environment:
      - CLUSTER_NAME=test
    env_file:
      - ./hadoop.env

  datanode1:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode1
    restart: always
    volumes:
      - hadoop_datanode1:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env

  datanode2:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode2
    restart: always
    volumes:
      - hadoop_datanode2:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env

  datanode3:
    image: bde2020/hadoop-datanode:2.0.0-hadoop3.2.1-java8
    container_name: datanode3
    restart: always
    volumes:
      - hadoop_datanode3:/hadoop/dfs/data
    environment:
      SERVICE_PRECONDITION: "namenode:9870"
    env_file:
      - ./hadoop.env
  
  resourcemanager:
    image: bde2020/hadoop-resourcemanager:2.0.0-hadoop3.2.1-java8
    container_name: resourcemanager
    restart: always
    ports:
      - 8088:8088
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864 datanode3:9864"
    env_file:
      - ./hadoop.env

  nodemanager1:
    image: bde2020/hadoop-nodemanager:2.0.0-hadoop3.2.1-java8
    container_name: nodemanager
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864 datanode3:9864 resourcemanager:8088"
    env_file:
      - ./hadoop.env
  
  historyserver:
    image: bde2020/hadoop-historyserver:2.0.0-hadoop3.2.1-java8
    container_name: historyserver
    restart: always
    environment:
      SERVICE_PRECONDITION: "namenode:9000 namenode:9870 datanode1:9864 datanode2:9864 datanode3:9864 resourcemanager:8088"
    volumes:
      - hadoop_historyserver:/hadoop/yarn/timeline
    env_file:
      - ./hadoop.env
  
  spark-master:
    image: bde2020/spark-master:3.3.0-hadoop3.3
    container_name: spark-master
    ports:
      - "8082:8080"
      - "7077:7077"
    environment:
      - INIT_DAEMON_STEP=setup_spark
    volumes:
    - ./spark/spark_data:/spark/data

  spark-worker-1:
    image: bde2020/spark-worker:3.3.0-hadoop3.3
    container_name: spark-worker-1
    depends_on:
      - spark-master
    ports:
      - "8086:8086"
    environment:
      - "SPARK_MASTER=spark://spark-master:7077"
    volumes:
    - ./spark/spark_data:/spark/data

volumes:
  hadoop_home:
  hadoop_namenode:
  hadoop_datanode1:
  hadoop_datanode2:
  hadoop_datanode3:
  hadoop_historyserver:
  

 